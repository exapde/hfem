function [fh,fh_udg,fh_uh] = fhat2d(nl,pg,udg,uh,param,time)
%FHAT2D
%    [FH,FH_UDG,FH_UH] = FHAT2D(NL,PG,UDG,UH,PARAM,TIME)

%    This function was generated by the Symbolic Math Toolbox version 7.1.
%    19-Mar-2017 09:59:36
[ng,nc] = size(udg);
nch = 2;
nd = 2;
lambda = param{2};
mu = param{1};
nl1 = nl(:,1);
nl2 = nl(:,2);
one = ones(ng,1);
q11 = udg(:,3);
q12 = udg(:,5);
q21 = udg(:,4);
q22 = udg(:,6);
tau = param{3};
u1 = udg(:,1);
u2 = udg(:,2);
uh1 = uh(:,1);
uh2 = uh(:,2);
zero = zeros(ng,1);
t2 = q11+q22+2.0;
t3 = lambda.*t2;
t4 = q12+q21;
fh = [nl1.*(t3+mu.*(q11+1.0).*2.0)+tau.*(u1-uh1)+mu.*nl2.*t4;nl2.*(t3+mu.*(q22+1.0).*2.0)+tau.*(u2-uh2)+mu.*nl1.*t4];
if nargout > 1
    t5 = one.*tau;
    t6 = mu.*nl2.*one;
    t7 = mu.*nl1.*one;
    t8 = mu.*2.0;
    t9 = lambda+t8;
    fh_udg = [t5;zero;zero;t5;nl1.*one.*t9;lambda.*nl2.*one;t6;t7;t6;t7;lambda.*nl1.*one;nl2.*one.*t9];
end
if nargout > 2
    fh_uh = [-t5;zero;zero;-t5];
end
fh = reshape(fh,ng,nch);
fh_udg = reshape(fh_udg,ng,nch,nc);
fh_uh = reshape(fh_uh,ng,nch,nch);
